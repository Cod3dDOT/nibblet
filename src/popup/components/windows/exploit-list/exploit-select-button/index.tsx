/*
 * SPDX-FileCopyrightText: 2025 cod3ddo@proton.me
 *
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

import { Button, ButtonProps } from '@components/common/button';
import type { IExploit, IExploitResponse } from '@lib/exploits/interfaces';
import { useState } from 'react';
import { RiCheckFill, RiErrorWarningFill, RiPlayFill } from 'react-icons/ri';

import type { OperationState } from '~lib/state';
import { Spinner } from '~popup/components/common/spinner';

interface ExploitSelectButtonProps extends ButtonProps {
	exploit: IExploit;
	result?: IExploitResponse;
	onExploitCallback: () => void;
	onRunCallback: () => void;
}

export const ExploitSelectButton: React.FC<ExploitSelectButtonProps> = ({
	exploit,
	result,
	onExploitCallback,
	onRunCallback
}) => {
	const [ran, setRan] = useState<boolean>(false);

	const getExploitState = (): OperationState => {
		return result ? (result.success ? 'SUCCESS' : 'ERROR') : 'LOADING';
	};

	const onRun = () => {
		onRunCallback();
		setRan(true);

		setTimeout(() => {
			setRan(false);
		}, 3000);
	};

	return (
		<div className="p-4 flex text-base justify-between bg-dark-primary-dark w-full">
			<Button onClick={onExploitCallback} className="flex-grow">
				<p className="w-full text-left">{exploit.name}</p>
			</Button>
			<Button onClick={onRun}>
				{!ran ? (
					<RiPlayFill className="text-lg fill-dark-green" />
				) : getExploitState() == 'SUCCESS' ? (
					<RiCheckFill className="text-lg fill-dark-green" />
				) : getExploitState() == 'ERROR' ? (
					<RiErrorWarningFill className="text-lg fill-dark-red" />
				) : (
					<Spinner className="h-5 w-5" />
				)}
			</Button>
		</div>
	);
};
