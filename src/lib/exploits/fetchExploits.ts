/*
 * SPDX-FileCopyrightText: 2025 cod3ddo@proton.me
 *
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

import type { IExploit, IExploitUID } from "@lib/exploits/interfaces";
import type { SemVer } from "semver";

// Somehow this will only resolve when not using aliases (yes, I spent 2 days on this)
import { validateExploitSchema } from "./schemas/ExploitSchema.js";
import type { IHost } from "./interfaces/IHost.js";

const fetchTimeout = async (
	url: URL,
	ms: number,
	{ signal, ...options }: RequestInit = {},
) => {
	const controller = new AbortController();
	const promise = fetch(url, { signal: controller.signal, ...options });
	if (signal) signal.addEventListener("abort", () => controller.abort());
	const timeout = setTimeout(() => controller.abort(), ms);
	try {
		return await promise;
	} finally {
		clearTimeout(timeout);
	}
};

export async function fetchExploits(
	tabUrl: string,
	host: URL,
): Promise<{
	result: IHost;
	message?: string;
}> {
	const controller = new AbortController();
	let total: Array<IExploit> = [];

	let resp;

	try {
		resp = await fetchTimeout(host, 4000, {
			signal: controller.signal,
		});
	} catch (e) {
		return {
			result: { url: host, state: "ERROR", exploits: total },
			message: "Host timed out",
		};
	}

	if (!resp.ok)
		return {
			result: { url: host, state: "ERROR", exploits: total },
			message: "Host failed to respond",
		};

	const exploits = await resp.json();
	if (!Array.isArray(exploits))
		return {
			result: { url: host, state: "ERROR", exploits: total },
			message: "Invalid host response",
		};

	const validExploits = exploits
		.filter(
			(exploit) =>
				validateExploitSchema(exploit) && new RegExp(exploit.url).test(tabUrl),
		)
		.map((exploit) => {
			return {
				name: exploit.name,
				description: exploit.description,
				location: new URL(exploit.location),
				matches: [new RegExp(exploit.url)],
				version: exploit.version as SemVer,
				uid: exploit.uid as IExploitUID,
			} as IExploit;
		});
	total = total.concat(validExploits);

	return { result: { url: host, state: "SUCCESS", exploits: total } };
}
